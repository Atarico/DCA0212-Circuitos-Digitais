// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2019 22:17:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    display7seg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module display7seg_vlg_sample_tst(
	xseg,
	sampler_tx
);
input [3:0] xseg;
output sampler_tx;

reg sample;
time current_time;
always @(xseg)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module display7seg_vlg_check_tst (
	aseg,
	bseg,
	cseg,
	dseg,
	eseg,
	fseg,
	gseg,
	sampler_rx
);
input  aseg;
input  bseg;
input  cseg;
input  dseg;
input  eseg;
input  fseg;
input  gseg;
input sampler_rx;

reg  aseg_expected;
reg  bseg_expected;
reg  cseg_expected;
reg  dseg_expected;
reg  eseg_expected;
reg  fseg_expected;
reg  gseg_expected;

reg  aseg_prev;
reg  bseg_prev;
reg  cseg_prev;
reg  dseg_prev;
reg  eseg_prev;
reg  fseg_prev;
reg  gseg_prev;

reg  aseg_expected_prev;
reg  bseg_expected_prev;
reg  cseg_expected_prev;
reg  dseg_expected_prev;
reg  eseg_expected_prev;
reg  fseg_expected_prev;
reg  gseg_expected_prev;

reg  last_aseg_exp;
reg  last_bseg_exp;
reg  last_cseg_exp;
reg  last_dseg_exp;
reg  last_eseg_exp;
reg  last_fseg_exp;
reg  last_gseg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	aseg_prev = aseg;
	bseg_prev = bseg;
	cseg_prev = cseg;
	dseg_prev = dseg;
	eseg_prev = eseg;
	fseg_prev = fseg;
	gseg_prev = gseg;
end

// update expected /o prevs

always @(trigger)
begin
	aseg_expected_prev = aseg_expected;
	bseg_expected_prev = bseg_expected;
	cseg_expected_prev = cseg_expected;
	dseg_expected_prev = dseg_expected;
	eseg_expected_prev = eseg_expected;
	fseg_expected_prev = fseg_expected;
	gseg_expected_prev = gseg_expected;
end



// expected aseg
initial
begin
	aseg_expected = 1'bX;
end 

// expected bseg
initial
begin
	bseg_expected = 1'bX;
end 

// expected cseg
initial
begin
	cseg_expected = 1'bX;
end 

// expected dseg
initial
begin
	dseg_expected = 1'bX;
end 

// expected eseg
initial
begin
	eseg_expected = 1'bX;
end 

// expected fseg
initial
begin
	fseg_expected = 1'bX;
end 

// expected gseg
initial
begin
	gseg_expected = 1'bX;
end 
// generate trigger
always @(aseg_expected or aseg or bseg_expected or bseg or cseg_expected or cseg or dseg_expected or dseg or eseg_expected or eseg or fseg_expected or fseg or gseg_expected or gseg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aseg = %b | expected bseg = %b | expected cseg = %b | expected dseg = %b | expected eseg = %b | expected fseg = %b | expected gseg = %b | ",aseg_expected_prev,bseg_expected_prev,cseg_expected_prev,dseg_expected_prev,eseg_expected_prev,fseg_expected_prev,gseg_expected_prev);
	$display("| real aseg = %b | real bseg = %b | real cseg = %b | real dseg = %b | real eseg = %b | real fseg = %b | real gseg = %b | ",aseg_prev,bseg_prev,cseg_prev,dseg_prev,eseg_prev,fseg_prev,gseg_prev);
`endif
	if (
		( aseg_expected_prev !== 1'bx ) && ( aseg_prev !== aseg_expected_prev )
		&& ((aseg_expected_prev !== last_aseg_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aseg_expected_prev);
		$display ("     Real value = %b", aseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aseg_exp = aseg_expected_prev;
	end
	if (
		( bseg_expected_prev !== 1'bx ) && ( bseg_prev !== bseg_expected_prev )
		&& ((bseg_expected_prev !== last_bseg_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bseg_expected_prev);
		$display ("     Real value = %b", bseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bseg_exp = bseg_expected_prev;
	end
	if (
		( cseg_expected_prev !== 1'bx ) && ( cseg_prev !== cseg_expected_prev )
		&& ((cseg_expected_prev !== last_cseg_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cseg_expected_prev);
		$display ("     Real value = %b", cseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cseg_exp = cseg_expected_prev;
	end
	if (
		( dseg_expected_prev !== 1'bx ) && ( dseg_prev !== dseg_expected_prev )
		&& ((dseg_expected_prev !== last_dseg_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dseg_expected_prev);
		$display ("     Real value = %b", dseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dseg_exp = dseg_expected_prev;
	end
	if (
		( eseg_expected_prev !== 1'bx ) && ( eseg_prev !== eseg_expected_prev )
		&& ((eseg_expected_prev !== last_eseg_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eseg_expected_prev);
		$display ("     Real value = %b", eseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_eseg_exp = eseg_expected_prev;
	end
	if (
		( fseg_expected_prev !== 1'bx ) && ( fseg_prev !== fseg_expected_prev )
		&& ((fseg_expected_prev !== last_fseg_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fseg_expected_prev);
		$display ("     Real value = %b", fseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_fseg_exp = fseg_expected_prev;
	end
	if (
		( gseg_expected_prev !== 1'bx ) && ( gseg_prev !== gseg_expected_prev )
		&& ((gseg_expected_prev !== last_gseg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gseg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gseg_expected_prev);
		$display ("     Real value = %b", gseg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_gseg_exp = gseg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module display7seg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] xseg;
// wires                                               
wire aseg;
wire bseg;
wire cseg;
wire dseg;
wire eseg;
wire fseg;
wire gseg;

wire sampler;                             

// assign statements (if any)                          
display7seg i1 (
// port map - connection between master ports and signals/registers   
	.aseg(aseg),
	.bseg(bseg),
	.cseg(cseg),
	.dseg(dseg),
	.eseg(eseg),
	.fseg(fseg),
	.gseg(gseg),
	.xseg(xseg)
);
// xseg[ 3 ]
initial
begin
	xseg[3] = 1'b0;
	xseg[3] = #350000 1'b1;
	xseg[3] = #400000 1'b0;
end 
// xseg[ 2 ]
initial
begin
	xseg[2] = 1'b0;
	xseg[2] = #150000 1'b1;
	xseg[2] = #200000 1'b0;
	xseg[2] = #200000 1'b1;
	xseg[2] = #200000 1'b0;
end 
// xseg[ 1 ]
initial
begin
	xseg[1] = 1'b0;
	xseg[1] = #50000 1'b1;
	xseg[1] = #100000 1'b0;
	xseg[1] = #100000 1'b1;
	xseg[1] = #100000 1'b0;
	xseg[1] = #100000 1'b1;
	xseg[1] = #100000 1'b0;
	xseg[1] = #100000 1'b1;
	xseg[1] = #100000 1'b0;
end 
// xseg[ 0 ]
initial
begin
	xseg[0] = 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
	xseg[0] = #50000 1'b1;
	xseg[0] = #50000 1'b0;
end 

display7seg_vlg_sample_tst tb_sample (
	.xseg(xseg),
	.sampler_tx(sampler)
);

display7seg_vlg_check_tst tb_out(
	.aseg(aseg),
	.bseg(bseg),
	.cseg(cseg),
	.dseg(dseg),
	.eseg(eseg),
	.fseg(fseg),
	.gseg(gseg),
	.sampler_rx(sampler)
);
endmodule

